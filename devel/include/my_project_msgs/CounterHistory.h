// Generated by gencpp from file my_project_msgs/CounterHistory.msg
// DO NOT EDIT!


#ifndef MY_PROJECT_MSGS_MESSAGE_COUNTERHISTORY_H
#define MY_PROJECT_MSGS_MESSAGE_COUNTERHISTORY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_project_msgs
{
template <class ContainerAllocator>
struct CounterHistory_
{
  typedef CounterHistory_<ContainerAllocator> Type;

  CounterHistory_()
    : current_value(0.0)
    , last_value(0.0)
    , cycles(0)  {
    }
  CounterHistory_(const ContainerAllocator& _alloc)
    : current_value(0.0)
    , last_value(0.0)
    , cycles(0)  {
  (void)_alloc;
    }



   typedef double _current_value_type;
  _current_value_type current_value;

   typedef double _last_value_type;
  _last_value_type last_value;

   typedef int64_t _cycles_type;
  _cycles_type cycles;





  typedef boost::shared_ptr< ::my_project_msgs::CounterHistory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_project_msgs::CounterHistory_<ContainerAllocator> const> ConstPtr;

}; // struct CounterHistory_

typedef ::my_project_msgs::CounterHistory_<std::allocator<void> > CounterHistory;

typedef boost::shared_ptr< ::my_project_msgs::CounterHistory > CounterHistoryPtr;
typedef boost::shared_ptr< ::my_project_msgs::CounterHistory const> CounterHistoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_project_msgs::CounterHistory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_project_msgs::CounterHistory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_project_msgs::CounterHistory_<ContainerAllocator1> & lhs, const ::my_project_msgs::CounterHistory_<ContainerAllocator2> & rhs)
{
  return lhs.current_value == rhs.current_value &&
    lhs.last_value == rhs.last_value &&
    lhs.cycles == rhs.cycles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_project_msgs::CounterHistory_<ContainerAllocator1> & lhs, const ::my_project_msgs::CounterHistory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_project_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_project_msgs::CounterHistory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_project_msgs::CounterHistory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_project_msgs::CounterHistory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_project_msgs::CounterHistory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_project_msgs::CounterHistory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_project_msgs::CounterHistory_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_project_msgs::CounterHistory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "56341dd3fc54a9e6cbc911af5bca695f";
  }

  static const char* value(const ::my_project_msgs::CounterHistory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x56341dd3fc54a9e6ULL;
  static const uint64_t static_value2 = 0xcbc911af5bca695fULL;
};

template<class ContainerAllocator>
struct DataType< ::my_project_msgs::CounterHistory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_project_msgs/CounterHistory";
  }

  static const char* value(const ::my_project_msgs::CounterHistory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_project_msgs::CounterHistory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 current_value\n"
"float64 last_value\n"
"int64 cycles\n"
;
  }

  static const char* value(const ::my_project_msgs::CounterHistory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_project_msgs::CounterHistory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current_value);
      stream.next(m.last_value);
      stream.next(m.cycles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CounterHistory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_project_msgs::CounterHistory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_project_msgs::CounterHistory_<ContainerAllocator>& v)
  {
    s << indent << "current_value: ";
    Printer<double>::stream(s, indent + "  ", v.current_value);
    s << indent << "last_value: ";
    Printer<double>::stream(s, indent + "  ", v.last_value);
    s << indent << "cycles: ";
    Printer<int64_t>::stream(s, indent + "  ", v.cycles);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_PROJECT_MSGS_MESSAGE_COUNTERHISTORY_H
